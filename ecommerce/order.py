"""This code was generated by AI"""
VALID_STATUSES = {"created", "paid", "shipped", "delivered", "cancelled"}

def create_order(customer_name: str, items: list[dict]) -> dict:
    """
    Create a new order with customer information and a list of items.

    Args:
        customer_name (str): Name of the customer.
        items (list of dict): List of items, where each item is a dictionary
            with keys: "name" (str), "price" (float or int), and "quantity" (int).

    Returns:
        dict: A dictionary representing the created order with keys:
            - "customer": str
            - "status": str (default is "created")
            - "total": float
            - "items": list of dict

    Raises:
        ValueError: If customer_name is invalid, or if items list is invalid,
                    or if item fields are missing or have incorrect types.
    """
    if not isinstance(customer_name, str) or not customer_name:
        raise ValueError("Invalid customer name")
    if not items or not isinstance(items, list):
        raise ValueError("Item list is required")

    total = 0
    for item in items:
        if not all(k in item for k in ("name", "price", "quantity")):
            raise ValueError("Each item must have 'name', 'price', and 'quantity'")
        if not isinstance(item["price"], (int, float)) or item["price"] <= 0:
            raise ValueError("Price must be a positive number")
        if not isinstance(item["quantity"], int) or item["quantity"] <= 0:
            raise ValueError("Quantity must be a positive integer")
        total += item["price"] * item["quantity"]

    return {
        "customer": customer_name,
        "status": "created",
        "total": round(total, 2),
        "items": items
    }

def update_order_status(order: dict, new_status: str) -> dict:
    """
    Update the status of an existing order.

    Args:
        order (dict): The order dictionary to update.
        new_status (str): The new status to set. Must be one of VALID_STATUSES.

    Returns:
        dict: The updated order dictionary.

    Raises:
        ValueError: If new_status is not a valid status.
    """
    if new_status not in VALID_STATUSES:
        raise ValueError("Invalid status")
    order["status"] = new_status
    return order
